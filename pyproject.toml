[build-system]
requires = ["setuptools>=73", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "discord-ext-custom_interaction"
requires-python = ">= 3.10"
dependencies = ["aiohttp>=3.11,<4", "discord.py>=2.4.0,<3"]
description = "An extension for discord.py that allows you to subclass `discord.Interaction` to add custom functionality."
dynamic = ["version", "readme"]
license = { file = "LICENSE" }
keywords = [
    "discord.py",
    "dpy",
    "discord",
    "extension",
    "discord.ext",
    "interactions",
    "custom",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Natural Language :: English",
    "Typing :: Typed",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.setuptools.dynamic]
version = { attr = "discord.ext.custom_interaction.__version__" }
readme = { file = "readme.rst", content-type = "text/x-rst" }

[project.optional-dependencies]
dev = ["typing_extensions>=4.12.2,<5", "ruff>=0.9.3,<10"]

[tool.setuptools]
packages = ["discord", "discord.ext", "discord.ext.custom_interaction"]

[project.urls]
homepage = "https://github.com/Soheab/discord-ext-custom_interaction"
repository = "https://github.com/Soheab/discord-ext-custom_interaction"

[tool.pyright]
include = ["discord", "discord.ext", "discord.ext.custom_interaction"]
exclude = ["**/__pycache__", "_build", "build", "dist"]
pythonVersion = "3.10"
typeCheckingMode = "strict"

reportPrivateUsage = false          # idc
reportUnnecessaryIsInstance = false # idc

# source:
# https://github.com/AbstractUmbra/Mipha/blob/main/pyproject.toml#:~:text=tool.ruff

[tool.ruff]
line-length = 125
target-version = "py310"
include = ["discord", "discord.ext", "discord.ext.custom_interaction"]
exclude = ["**/__pycache__", "_build", "build", "dist", "examples"]

[tool.ruff.lint]
preview = true
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "COM",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "FURB",
    "G",
    "I",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PLC",
    "PLE",
    "PLW",
    "PTH",
    "PYI",
    "Q",
    "Q003",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "YTT",
    # "DOC", # not in a bot, please
]
ignore = [
    "ANN401",
    "ASYNC109", # dpy commonly uses this parameter
    "EM101",    # in this case this is okay
    "F401",
    "F402",
    "F403",
    "F405",
    "INP001",   # due to how I load modules this results in annoyances
    "PD011",    # this is not a numpy codebase
    "PERF203",
    "PLC0414",  # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "S101",     # assert is used for type checking in this codebase
    "SIM105",
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    "UP034",
    "UP038",
    "A005",     # dwai
    "ERA001",   # i like my commented out code
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]
exclude = ["examples/*"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true   # default: false
ignore-fully-untyped = true # default: false
suppress-dummy-args = true  # default: false

[tool.ruff.flake8-bandit]
check-typed-exception = true # default: false

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true # default: false

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.isort]
case-sensitive = true # default: false
combine-as-imports = true # default: false
force-sort-within-sections = true # default: false
force-to-top = ["future", "typing"] # default: []
force-wrap-aliases = true # default: false
required-imports = ["from __future__ import annotations"] # default: []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
] # default

[tool.ruff.pydocstyle]
convention = "numpy"                    # default: none
ignore-decorators = ["typing.overload"] # default: []

[tool.ruff.pylint]
max-args = 20 # default: 5 # lets not limit ourselves :)

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true # default: false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
